{"version":3,"sources":["components/MatchButtons.jsx","components/SetupForm.jsx","components/pickMatch.js","components/AiTurnAnimation.jsx","components/ShowMatches.jsx","components/MainMenuButton.jsx","components/EndGameScreen.jsx","components/App.jsx","index.js"],"names":["MatchButtons","props","onClickHandler","matchNumber","setMatches","prevProps","totalMatches","playerMatches","setGameStage","Button","size","variant","color","onClick","SetupForm","className","id","startGame","type","name","min","max","value","matches","step","onChange","event","target","for","pickMatch","aiMatches","gameWinningTable","optimalChoice","AiTurnAnimation","useState","isThinking","setIsThinking","useRef","useEffect","timer","setTimeout","current","clearTimeout","ShowMatches","totalMatchesString","repeat","style","MainMenuButton","styling","EndGameScreen","App","gameStage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9da0359c.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from '@material-ui/core/Button';\n\n/**\n * A component that displays from one to three buttons that allow user to choose\n * the number of matches to pick.\n */\nfunction MatchButtons(props) {\n\n  function onClickHandler(matchNumber) {\n    props.setMatches((prevProps) => {\n      return {\n        ...prevProps,\n        totalMatches: prevProps.totalMatches - matchNumber,\n        playerMatches: prevProps.playerMatches + matchNumber\n      }\n    })\n    props.setGameStage(\"aiTurn\")\n  }\n\n  return (\n    <div>\n      <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={() => onClickHandler(1)}>1 Matches</Button>\n      {\n        props.totalMatches >= 2 &&\n        <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={() => onClickHandler(2)}>2 Matches</Button>\n      }\n      {\n        props.totalMatches >= 3 &&\n        <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={() => onClickHandler(3)}>3 Matches</Button>\n      }\n    </div>\n  )\n}\n\nexport default MatchButtons;","import React from \"react\"\nimport Button from '@material-ui/core/Button';\n\n\n/**\n * A component that is first shown when the app is loaded. Gives user the ability\n * to choose the starting player and the number of matches in the game.\n */\nfunction SetupForm(props) {\n\n  function matchesSliderHandler(event) {\n    props.setMatches((prevProps) => {\n      return {\n        ...prevProps,\n        totalMatches: event.target.value\n      }\n    })\n  }\n\n  return (\n    <div>\n      <h1 className=\"lowered\">Choose who starts</h1>\n      <Button\n        size=\"large\"\n        variant=\"contained\"\n        color=\"primary\"\n        id=\"aiButton\"\n        onClick={() => props.startGame(false)}\n      >\n        AI\n      </Button>\n      <Button \n        size=\"large\"\n        variant=\"contained\" \n        color=\"primary\"\n        id=\"playerButton\" \n        onClick={() => props.startGame(true)}\n      >\n        You\n      </Button><br />\n      <h3>Choose the number of matches</h3>\n      <input \n      type=\"range\"\n      id=\"matches\"\n      name=\"matches\"\n      min=\"1\"\n      max=\"99\"\n      value={props.matches.totalMatches}\n      step=\"2\"\n      onChange={matchesSliderHandler}\n      />\n      <br />\n      <label for=\"matches\">{props.matches.totalMatches} matches</label>\n      <p className=\"description\">\n        The rules are as follows: there is an odd number of matches on the table.\n        Players pick either one, two or three matches in turn. After all matches\n        have been picked, the person with an even number of matches wins.\n      </p>\n    </div>\n  )\n}\n\n\nexport default SetupForm;","/**\n * Make the optimal decision about the amout of matches the AI should take.\n * @property {number} aiMatches - the amount of matches the AI \n * (the decision algorithm) has.\n * @property {number} totalMatches - the total amout of matches that can be taken\n */\nfunction pickMatch(aiMatches, totalMatches) {\n\n  /**\n   * Row index - number of matches remaining\n   * Columns:\n   * Column 0 - you have an even number of matches and it's your turn\n   * Column 1 - you have an even number of matches and it's the player's turn\n   * Column 2 - you have and odd number of matches and it's your turn\n   * Colums 3 - you have and odd number of matches and it's the player's turn\n   * \n   * The boolean value at given indices [n, m] means that if there are n matches\n   * left and you are at m position (column) according to the turn and the parity\n   * of the matches. The true value means it's a winning position, and false\n   * means that if the other player does everything right, you'll lose.\n   * \n   * This is the pattern only for a game where users pick either 1, 2, or 3 matches.\n   * The number of matches overall is only restricted to being odd to avoid\n   * ties. The given pattern repeats every eight matches.\n   */\n  const gameWinningTable = [\n    [true, true, false, false],\n    [false, true, true, false],\n    [true, false, true, false],\n    [true, false, true, false],\n    [false, false, true, true],\n    [true, false, false, true],\n    [true, false, true, false],\n    [true, false, true, false]\n  ]\n\n  // Choosing one match is the default strategy in case the current \n  // position is losing\n  let optimalChoice = 1;\n\n  if (aiMatches % 2 === 0) {\n\n    // Check if choosing 1 match results to be the winning stategy\n    if (totalMatches >= 1 && gameWinningTable[(totalMatches - 1) % 8][3]) {\n      optimalChoice = 1;\n\n    // Check if choosing 2 matches results to be the winning stategy\n    } else if (totalMatches >= 2 && gameWinningTable[(totalMatches - 2) % 8][1]) {\n      optimalChoice = 2;\n\n    // Check if choosing 3 matches results to be the winning stategy\n    } else if (totalMatches >= 3 && gameWinningTable[(totalMatches - 3) % 8][3]) {\n      optimalChoice = 3;\n    }\n\n  } else {\n\n    // Check if choosing 1 match results to be the winning stategy\n    if (totalMatches >= 1 && gameWinningTable[(totalMatches - 1) % 8][1]) {\n      optimalChoice = 1;\n\n    // Check if choosing 2 matches results to be the winning stategy\n    } else if (totalMatches >= 2 && gameWinningTable[(totalMatches - 2) % 8][3]) {\n      optimalChoice = 2;\n\n    // Check if choosing 3 matches results to be the winning stategy\n    } else if (totalMatches >= 3 && gameWinningTable[(totalMatches - 3) % 8][1]) {\n      optimalChoice = 3;\n    }\n  }\n\n  return optimalChoice;\n}\n\n\nexport default pickMatch;","import React, { useEffect, useState, useRef } from \"react\"\nimport { Dot } from 'react-animated-dots';\nimport pickMatch from \"./pickMatch.js\"\n\n\nfunction AiTurnAnimation(props) {\n\n  // A state to handle animation in this component\n  const [isThinking, setIsThinking] = useState(true);\n\n  // Without useRef, optimalChoice will be recalculated on re-render\n  let optimalChoice = useRef(pickMatch(props.matches.aiMatches, props.matches.totalMatches))\n\n  // Show the text with dots for 2 secs. Also change the number of matches\n  useEffect(() => {\n    if (isThinking) {\n      const timer = setTimeout(() => {\n        setIsThinking(false);\n        props.setMatches((prevProps) => {\n          return {\n            ...prevProps,\n            totalMatches: prevProps.totalMatches - optimalChoice.current,\n            aiMatches: prevProps.aiMatches + optimalChoice.current\n          }\n        })\n      }, 2000);\n      return () => clearTimeout(timer);\n    }\n  })\n\n  // Then show the number of matches the algorithm has picked for 2 secs and pass\n  // the game to the player. \n  useEffect(() => {\n    if (!isThinking) {\n      const timer = setTimeout(() => {\n        props.setGameStage(\"playerTurn\")\n      }, 2000);\n      return () => clearTimeout(timer)\n    }\n  })\n\n\n  return (\n    <div>\n      { isThinking ?\n        <h1>The AI is thinking about how to overmatch you<Dot>.</Dot><Dot>.</Dot><Dot>.</Dot></h1>\n        : <h1>The AI has chosen to pick {optimalChoice.current} match{optimalChoice.current !== 1 && \"es\"}!</h1>\n      }\n    </div>\n  )\n}\n\n\nexport default AiTurnAnimation;","import React from \"react\";\n\n// A component displaying the number of all matches\nfunction ShowMatches(props) {\n\n  let totalMatchesString = \"\"\n  \n  if (props.matches.totalMatches < 10) {\n    totalMatchesString = \"🔥\".repeat(props.matches.totalMatches)\n  } else {\n    totalMatchesString = `🔥 x ${props.matches.totalMatches}`\n  }\n \n\n  return (\n    <div>\n      <h3>Your opponent has got {props.matches.aiMatches} 🔥</h3>\n\n      <h3>Total matches available:</h3>\n      <p style={{\"fontSize\": 40}}>{totalMatchesString}</p>\n\n      <h3>You've got {props.matches.playerMatches} 🔥</h3>\n    </div>\n  )\n}\n\nexport default ShowMatches;","import React from \"react\";\nimport Button from '@material-ui/core/Button';\n\n/**\n * The button, on clicking which the user goes back to the setup stage\n */\nfunction MainMenuButton(props) {\n  function onClickHandler() {\n    props.setMatches({\n      totalMatches: 25,\n      playerMatches: 0,\n      aiMatches: 0\n    })\n    props.setGameStage(\"setup\")\n  }\n\n  return (\n    <div className={props.styling ? props.styling : \"main-menu-button heading-bar\"}>\n      <Button size=\"large\" onClick={onClickHandler} variant=\"contained\" color=\"primary\">Main Menu</Button>\n    </div>\n  )\n}\n\nexport default MainMenuButton;","import React from \"react\";\nimport MainMenuButton from \"./MainMenuButton.jsx\"\n\n\nfunction EndGameScreen(props) {\n  return (\n    <div className=\"lowered\">\n      {\n        props.matches.playerMatches % 2 === 0 ?\n        <h1>You have won! The guy in the mask will miss'ya!</h1>\n        : <h1>The AI has won... A great pity it is.</h1>\n      }\n      <p>\n        You have {props.matches.playerMatches} 🔥, and the AI\n        has {props.matches.aiMatches} 🔥\n      </p>\n      {\n        props.matches.playerMatches % 2 === 0 ?\n        <p>Let's see if you can do this once again...</p>\n        : <p>Try your luck once again, kiddo</p>\n      }\n      <MainMenuButton\n        styling={\"endgame-button\"}\n        setGameStage={props.setGameStage}\n        setMatches={props.setMatches}\n      />\n      \n    </div>\n  )\n}\n\nexport default EndGameScreen;","import React, { useState } from 'react';\nimport MatchButtons from \"./MatchButtons.jsx\"\nimport SetupForm from './SetupForm';\nimport AiTurnAnimation from \"./AiTurnAnimation.jsx\"\nimport ShowMatches from \"./ShowMatches.jsx\"\nimport EndGameScreen from './EndGameScreen.jsx';\nimport MainMenuButton from './MainMenuButton.jsx';\n\n\n\nfunction App() {\n  const [gameStage, setGameStage] = useState(\"setup\")\n  const [matches, setMatches] = useState({\n    totalMatches: 25,\n    aiMatches: 0,\n    playerMatches: 0\n  })\n\n  function startGame(isPlayersTurn = true) {\n    setGameStage(isPlayersTurn ? \"playerTurn\" : \"aiTurn\")\n  }\n\n  if (gameStage === \"setup\") {\n    return (\n    <SetupForm \n      matches={matches}\n      setMatches={setMatches}\n      startGame={startGame}\n    />\n    )\n    \n    // If there are no more matches in the game, i.e. the game is over.\n  } else if (matches.totalMatches <= 0 && (gameStage === \"aiTurn\" || gameStage === \"playerTurn\")) {\n    return (\n      <EndGameScreen \n      matches={matches}\n      setMatches={setMatches}\n      setGameStage={setGameStage}\n    />\n    )\n    \n  } else if (gameStage === \"aiTurn\") {\n    return (\n      <div>\n        <MainMenuButton\n          setGameStage={setGameStage}\n          setMatches={setMatches}\n        />\n        <AiTurnAnimation \n          matches={matches}\n          setMatches={setMatches}\n          setGameStage={setGameStage}\n        />\n        <ShowMatches \n          matches={matches}\n        />\n      </div>\n      \n    )\n\n  } else if (gameStage === \"playerTurn\") {\n    return (\n      <div>\n        <MainMenuButton\n          setGameStage={setGameStage}\n          setMatches={setMatches}\n        />\n        <h1>Pick your matches</h1>\n        <ShowMatches \n          matches={matches}\n        />\n        <MatchButtons\n          setMatches={setMatches}\n          setGameStage={setGameStage}\n          totalMatches={matches.totalMatches}\n        />\n      </div>\n    )\n  } \n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}